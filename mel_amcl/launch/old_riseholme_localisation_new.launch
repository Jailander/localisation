<?xml version="1.0" encoding="ISO-8859-15"?>

<launch>

  <!-- static transform publisher for the "main" gps receiver (where lat, lon comes from) -->
  <node name="septentrio_tf" pkg="tf" type="static_transform_publisher" respawn="true" args="-0.30 0 0.41 0 0 0 1 base_link septentrio 100" output="log">
  </node>

  <!-- gps yaw offset - if the two gps's are not parallel with forward direction of robot. Note: could probably just add to static transform but this makes it easier to debug -->
   <arg name="gps_yaw_offset_rad" default="-0.0698131"/>


  <node pkg="topic_tools" type="relay" name="relay_initial_estimate" clear_params="true"
    args="/set_pose /initialpose" />

  <!-- launch this node to transform data to the riseholme map frame -->
  <node pkg="mel_amcl" type="gps_to_map.py" name="gps_to_map" output="screen">
    <param name="gps_frame_id" value="septentrio" />
    <remap from="gps/fix" to="gps/fix"/> <!-- gps input topic name -->
    <!--  <param name="yaw_topic" value="/yaw/septentrio" /> -->
    <remap from="yaw" to="yaw"/> <!-- name of earth referenced heading imu type msg -->
    <param name="gps_log_directory" value="riseholme" />
    <!-- <param name="gps_log_directory" value="norway" /> --> <!-- directory name inside the rasberry_localisation packages gps_logs folder: rasberry_localisation/gps_logs/ -->     
    <param name="gps_yaw_offset_rad" value="$(arg gps_yaw_offset_rad)" />   
 </node> 




  <!-- launch amcl but dont publish map->odom tf as this is handled by ekf_se_map -->
  <include file="$(find mel_amcl)/launch/mel_amcl.launch"/>

  <!-- load parameters for both eKFs (odom and map) -->
  <!--  <rosparam command="load" file="$(find rasberry_localisation)/config/norway_localisation.yaml" /> -->

  <!-- load parameters for eKFs: odom, map and separate gps -->
  <rosparam command="load" file="$(find mel_amcl)/config/norway_localisation.yaml" />

  <!-- eKF for the odom frame -->
  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_se_odom" clear_params="true">
    <remap from="odometry/filtered" to="rl/odom"/>
  </node>

  <!-- eKF for the map frame -->
  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_se_map" clear_params="true">
    <remap from="odometry/filtered" to="rl/map_pose"/>
  </node>

  <!-- eKF for the gps in map frame, to use output, set use_gps_odom arg in mel_amcl to true --> 
  <!-- <node pkg="robot_localization" type="ekf_localization_node" name="ekf_gps" clear_params="true">
    <remap from="odometry/filtered" to="odometry/gps"/>
  </node> -->


</launch>
